local stabilizedMobMonsters = {}

local function SmoothPull(part, targetCFrame, speed)
    local currentPos = part.Position
    local targetPos = targetCFrame.Position
    local newPos = currentPos + (targetPos - currentPos) * speed
    part.CFrame = CFrame.new(newPos, targetPos)
end

local function LockPosition(part, targetPos)
    part.CFrame = CFrame.new(targetPos)
end

local function CheckMonstersAlive(pos)
    local count = 0
    for _, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
        if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
            if (v.HumanoidRootPart.Position - pos.Position).Magnitude <= 250 then
                count = count + 1
            end
        end
    end
    return count
end

local function IsPlayerNear(pos)
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        return (player.Character.HumanoidRootPart.Position - pos.Position).Magnitude <= 300
    end
    return false
end

if not syn then
    isnetworkowner = function() return true end
end

local function GetClosestMonsterInfo()
    local player = game.Players.LocalPlayer
    if not (player.Character and player.Character:FindFirstChild("HumanoidRootPart")) then return end
    local pPos = player.Character.HumanoidRootPart.Position

    local closestMonster, closestDistance
    for _, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
        if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
            local dist = (v.HumanoidRootPart.Position - pPos).Magnitude
            if not closestDistance or dist < closestDistance then
                closestMonster = v
                closestDistance = dist
            end
        end
    end

    if closestMonster then
        return closestMonster.HumanoidRootPart.CFrame, closestMonster.Name
    end
end

spawn(function()
    while task.wait() do
        pcall(function()
            local PosMon, NameMon = GetClosestMonsterInfo()
            if PosMon then
                -- Clear nếu không còn quái
                for monster, data in pairs(stabilizedMobMonsters) do
                    if not monster or not monster.Parent or not monster:FindFirstChild("Humanoid") or not monster:FindFirstChild("HumanoidRootPart") or monster.Humanoid.Health <= 0 then
                        stabilizedMobMonsters[monster] = nil
                    elseif tick() - data.LastUpdate > 2 then
                        stabilizedMobMonsters[monster] = nil
                    end
                end

                if CheckMonstersAlive(PosMon) == 0 then
                    stabilizedMobMonsters = {}
                end

                local pulledCount = 0
                for _, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                    if pulledCount >= 4 then break end

                    local isValid = (v.Name == NameMon or v.Name == "Factory Staff") and 
                                    not string.find(v.Name, "Boss") and
                                    v.Name ~= "Ice Admiral" and v.Name ~= "Don Swan" and 
                                    v.Name ~= "Saber Expert" and v.Name ~= "Longma"
                    local hasPart = v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Head")
                    local isAlive = hasPart and v.Humanoid.Health > 0
                    local inRange = hasPart and (v.HumanoidRootPart.Position - PosMon.Position).Magnitude <= 300
                    local isNotGhost = hasPart and v.HumanoidRootPart.Anchored == false

                    if isValid and hasPart and isAlive and inRange and isNotGhost and IsPlayerNear(PosMon) then
                        if syn and isnetworkowner(v.HumanoidRootPart) or not syn then
                            pulledCount = pulledCount + 1
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.Size = Vector3.new(1, 1, 1)
                            v.Humanoid.WalkSpeed = 0
                            v.Humanoid.JumpPower = 0
                            v.Humanoid:ChangeState(11)
                            v.Humanoid.PlatformStand = true
                            v.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
                            v.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
                            v.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
                            v.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
                            v.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
                            v.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)

                            local distToPosMon = (v.HumanoidRootPart.Position - PosMon.Position).Magnitude
                            if stabilizedMobMonsters[v] then
                                LockPosition(v.HumanoidRootPart, PosMon.Position)
                            else
                                SmoothPull(v.HumanoidRootPart, PosMon, 0.4)
                                if distToPosMon < 2 then
                                    LockPosition(v.HumanoidRootPart, PosMon.Position)
                                    stabilizedMobMonsters[v] = {
                                        Position = PosMon.Position,
                                        LastUpdate = tick(),
                                        RockSpeedX = math.random(1, 3) * 0.05,
                                        RockSpeedZ = math.random(1, 3) * 0.05,
                                        FloatPhase = math.random(0, 2 * math.pi),
                                        LastHP = v.Humanoid.Health,
                                        HPLockTick = tick()
                                    }
                                end
                            end
                        end
                    end
                end
                sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
            end
        end)
    end
end)

-- Rung lắc nhẹ + kiểm tra bất tử
spawn(function()
    game:GetService("RunService").RenderStepped:Connect(function()
        pcall(function()
            for monster, data in pairs(stabilizedMobMonsters) do
                if monster and monster.Parent and monster:FindFirstChild("HumanoidRootPart") and monster:FindFirstChild("Humanoid") and monster.Humanoid.Health > 0 then
                    local currentHP = monster.Humanoid.Health

                    -- Nếu máu không đổi trong 5 giây => coi là bất tử
                    if currentHP == data.LastHP then
                        if tick() - data.HPLockTick > 5 then
                            monster:Destroy()
                            stabilizedMobMonsters[monster] = nil
                            continue
                        end
                    else
                        data.LastHP = currentHP
                        data.HPLockTick = tick()
                    end

                    local shakeIntensity = 0.5
                    local time = tick()
                    local offsetX = math.sin(time * data.RockSpeedX + data.FloatPhase) * shakeIntensity
                    local offsetZ = math.cos(time * data.RockSpeedZ + data.FloatPhase) * shakeIntensity
                    local shakeOffset = Vector3.new(offsetX, 0, offsetZ)
                    LockPosition(monster.HumanoidRootPart, data.Position + shakeOffset)
                    data.LastUpdate = tick()
                else
                    stabilizedMobMonsters[monster] = nil
                end
            end
        end)
    end)
end)

-- Luôn giữ SimulationRadius lớn nhất
spawn(function()
    game:GetService("RunService").RenderStepped:Connect(function()
        if setscriptable then
            setscriptable(game.Players.LocalPlayer, "SimulationRadius", true)
        end
        if sethiddenproperty then
            sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
        end
    end)
end)
